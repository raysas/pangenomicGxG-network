'''
utility functions used several times in the project to read files and manage data:

- get_pheno_df: 
    reads a csv file of phenotypes
    returns a dataframe
    used in get_labeled_matrix and label_samples
- get_samples_list: 
    reads a file of species ids
    returns a list of all samples
    used in network_calculations.py
- get_gene_presence_matrix: 
    reads a Rtab file of gene presence/absence generated by roary
    returns a dataframe
    used in get_adjacency_matrix
- get_adjacency_matrix: 
    takes a gene presence/absence dataframe 
    returns an adjacency matrix
    used in get_adjacency_matrix and get_label_matrix
- get_network_from_adjacency: 
    takes an adjacency matrix 
    returns a networkx graph
    
- get_labeled_matrix: 
    takes a gene presence (X) df and a pheno df (Y), removes entries that do not have labels 
    return them in a joined df
    used in network_calculations.py

- get_core:
    takes a gene presence/absence matrix
    returns the core genome of the species (can specify threshhold)

- get_unique:
    takes a gene presence/absence matrix
    returns the unique genes of the species (can specify threshhold)

'''

import pandas as pd
import networkx as nx
import numpy as np


def get_pheno_df(pheno_csv_path: str) -> pd.DataFrame:
    '''
    Reads a csv file of phenotypes and returns a dataframe.  
    These csv files are found in data/phenotypes of the form <species>_<drug>.csv  

    param:
        - pheno_csv_path: (str) path to the csv file

    return:
        - pheno_df: (pd.DataFrame) dataframe of phenotypes
    '''
    df= pd.read_csv(pheno_csv_path, index_col=0).astype(int)
    return df

def get_samples_list(species_ids_path: str) -> list:

    '''
    Reads a file of species ids and returns a list of all samples.  
    These files are found in data/PATRIC_IDs of the form <species>.txt  

    param:
        - species_ids_path: (str) path to the file

    return:
        - samples_list: (list) list of all samples
    '''
    with open(species_ids_path) as f:
        samples_list = f.read().splitlines()

    return samples_list

def get_gene_presence_matrix(Rtab_presence_matrix_path: str, remove_hypothetical:bool=False) -> pd.DataFrame:
    '''
    Reads a Rtab file of gene presence/absence generated by roary and returns a dataframe.  
    These file should be under data/pangenomes/<species>/roary_pangenome/gene_absence_presence.Rtab
    -- this function filters out hypothetical proteins 

    param:
        - gene_presence_matrix_path: (str) path to the Rtab file

    return:
        - gene_presence_matrix: (pd.DataFrame) dataframe of gene presence/absence
    '''
    df= pd.read_csv(Rtab_presence_matrix_path, index_col=0, delimiter='\t')
    if remove_hypothetical:
        df=df[~df.index.str.contains('group')] #removing hypothetical genes
    return df

def get_adjacency_matrix(gene_presence_df: pd.DataFrame) -> pd.DataFrame:
    '''
    Takes a gene presence/absence dataframe and returns an adjacency matrix.

    param: 
        - gene_presence_df: (pd.DataFrame) dataframe of gene presence/absence  

    return:
        - A: (pd.DataFrame) adjacency matrix
    '''
    A=gene_presence_df.dot(gene_presence_df.T)
    A=A.astype(int)
    for i in range(len(A)): #removing self loops
        A.iloc[i,i]=0

    return A

def get_network_from_adjacency(A: pd.DataFrame) -> nx.Graph:
    '''
    Takes an adjacency matrix and returns a networkx graph.

    param:
        - A: (pd.DataFrame) adjacency matrix

    return:
        - G: (nx.Graph) networkx graph
    '''
    G=nx.from_pandas_adjacency(A)
    return G

def get_labeled_matrix(presence_df: pd.DataFrame, pheno_df: pd.DataFrame) -> pd.DataFrame:
    '''
    Adds the phenotypes to the gene presence/absence matrix.

    param:
        - presence_df: (pd.DataFrame) dataframe of gene presence/absence
        - pheno_df: (pd.DataFrame) dataframe of phenotypes

    return:
        - presence_df: (pd.DataFrame) dataframe of gene presence/absence with phenotypes
    '''
    presence_df=presence_df.T

    presence_df.index.name='genome_id'
    presence_df.index = presence_df.index.astype(float)

    presence_df=presence_df.join(pheno_df, how='outer')
    
    return presence_df

def get_core(presence_matrix, prop=0.95):
    '''
    Takes a gene presence/absence matrix and returns the core genome of the species.

    param:
        - prop: (float) proportion of presence to satrt considering as core
        - presence_matrix: (pd.DataFrame) dataframe of gene presence/absence

    return:
        - core: (list) list of genes that are in the core genome
    '''
    core=[]
    for gene in presence_matrix.index:
        if presence_matrix.loc[gene].sum()>prop*len(presence_matrix.columns):
            core.append(gene)
    return core

def get_unique(presence_matrix, prop=0.15):
    '''
    Takes a gene presence/absence matrix and returns the unique genes of the species.

    param:
        - prop: (float) proportion of presence to start considering as unique
        - presence_matrix: (pd.DataFrame) dataframe of gene presence/absence

    return:
        - unique: (list) list of genes that are unique to the species
    '''
    unique=[]
    for gene in presence_matrix.index:
        if presence_matrix.loc[gene].sum()<prop*len(presence_matrix.columns):
            unique.append(gene)
    return unique

get_presence_without_gene_set=lambda presence, gene_set: presence.drop(gene_set)